### Plan:

1. **Implement Yarn:**
   - Remove the existing `package-lock.json` file.
   - Install Yarn globally if it is not already installed.
   - Run `yarn install` in the project directory to create a `yarn.lock` file and install dependencies.

2. **Set Up Client-Side Routing:**
   - Ensure that the `App` component (or relevant routing component) is set up to use `react-router-dom` for client-side routing.
   - If not already present, install `react-router-dom` using Yarn.
   - Update the routing in the `App` component to handle different routes (e.g., `/recipes`, `/add-recipe`, etc.).

3. **Configure Server for Client-Side Routing:**
   - In the server configuration (likely in `server/server.js`), add a catch-all route that serves the `index.html` file for any unknown routes. This will prevent 404 errors when refreshing the page.
   - Example:
     ```javascript
     app.get('*', (req, res) => {
       res.sendFile(path.join(__dirname, '../client/build/index.html'));
     });
     ```

4. **Testing:**
   - After making the changes, run the application and test the routes to ensure they work correctly without 404 errors on refresh.

### Follow-Up Steps:
- Verify that the application runs correctly with Yarn.
- Confirm that client-side routing works as expected without 404 errors.
